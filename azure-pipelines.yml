# Build Docker image for this app using Azure Pipelines
# http://docs.microsoft.com/azure/devops/pipelines/languages/docker?view=vsts
pool:
  vmImage: 'Ubuntu 16.04'
  
variables:
  # Define the following variables in the the build pipeline UI:
  # - imageName
  # - registryName
  # - servicePrincipleId
  # - servicePrinciplePassword
  imageTag: '$(Build.BuildId)'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.7
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `app.py`."""
      from glob import iglob
      from os import path
      app_py = next(iglob(path.join('**', 'app.py'), recursive=True), None)
      if not app_py:
          raise SystemExit('Could not find a Flask project')
      project_location = path.dirname(path.abspath(app_py))
      print('Found Flask project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    pip install -r requirements.txt
    pip install -r dev-requirements.txt
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    pytest --junitxml=test-results.xml
  condition: succeededOrFailed()
  displayName: 'Run tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "test-results.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'

- script: |
    docker build -f Dockerfile -t $(registryName).azurecr.io/$(imageName):$(imageTag) .
    docker login -u $(servicePrincipleId) -p $pswd $(registryName).azurecr.io
    docker push $(registryName).azurecr.io/$(imageName):$(imageTag)
  env:
    pswd: $(servicePrinciplePassword)
  displayName: 'Build and push Docker image'
